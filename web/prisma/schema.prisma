// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  profileName   String? // This is the name we will use
  emailVerified DateTime?
  image         String?
  isTeacher     Boolean?
  isNewUser     Boolean?
  accounts      Account[]
  sessions      Session[]
  classes       Class[]
  enrollments   Enrollment[]
  assignments   Assignment[]
  grades        Grade[]
}

model Class {
  id                  String                @id @default(cuid())
  name                String
  image_url           String?
  subject             String?
  teacher             User                  @relation(fields: [teacherID], references: [id], onDelete: Cascade)
  teacherID           String
  students            Enrollment[]
  classes_assignments Classes_Assignments[]
}

model Enrollment {
  id        String @id @default(cuid())
  student   User   @relation(fields: [studentID], references: [id], onDelete: Cascade)
  studentID String
  class     Class  @relation(fields: [classID], references: [id], onDelete: Cascade)
  classID   String
}

model Assignment {
  id                  String                @id @default(cuid())
  name                String
  teacher             User                  @relation(fields: [teacherID], references: [id], onDelete: Cascade)
  teacherID           String
  classes_assignments Classes_Assignments[]
  grades              Grade[]
}

model Classes_Assignments {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentID], references: [id], onDelete: Cascade)
  assignmentID String
  class        Class      @relation(fields: [classID], references: [id], onDelete: Cascade)
  classID      String
}

model Grade {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentID], references: [id], onDelete: Cascade)
  assignmentID String
  student      User       @relation(fields: [studentID], references: [id], onDelete: Cascade)
  studentID    String
  grade        Int
}
